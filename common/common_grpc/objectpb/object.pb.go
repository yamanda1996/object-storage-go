// Code generated by protoc-gen-go. DO NOT EDIT.
// source: object.proto

package objectpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectChunk struct {
	Buffer               []byte   `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Hash                 string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Filename             string   `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectChunk) Reset()         { *m = ObjectChunk{} }
func (m *ObjectChunk) String() string { return proto.CompactTextString(m) }
func (*ObjectChunk) ProtoMessage()    {}
func (*ObjectChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d48463eef19a5f, []int{0}
}

func (m *ObjectChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectChunk.Unmarshal(m, b)
}
func (m *ObjectChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectChunk.Marshal(b, m, deterministic)
}
func (m *ObjectChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectChunk.Merge(m, src)
}
func (m *ObjectChunk) XXX_Size() int {
	return xxx_messageInfo_ObjectChunk.Size(m)
}
func (m *ObjectChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectChunk.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectChunk proto.InternalMessageInfo

func (m *ObjectChunk) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

func (m *ObjectChunk) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ObjectChunk) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ObjectChunk) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ObjectChunk) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type UploadReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Length               int64    `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReply) Reset()         { *m = UploadReply{} }
func (m *UploadReply) String() string { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()    {}
func (*UploadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d48463eef19a5f, []int{1}
}

func (m *UploadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadReply.Unmarshal(m, b)
}
func (m *UploadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadReply.Marshal(b, m, deterministic)
}
func (m *UploadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReply.Merge(m, src)
}
func (m *UploadReply) XXX_Size() int {
	return xxx_messageInfo_UploadReply.Size(m)
}
func (m *UploadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReply.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReply proto.InternalMessageInfo

func (m *UploadReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UploadReply) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func init() {
	proto.RegisterType((*ObjectChunk)(nil), "objectpb.ObjectChunk")
	proto.RegisterType((*UploadReply)(nil), "objectpb.UploadReply")
}

func init() { proto.RegisterFile("object.proto", fileDescriptor_41d48463eef19a5f) }

var fileDescriptor_41d48463eef19a5f = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x31, 0x2d, 0x21, 0x7d, 0xcd, 0xf4, 0x24, 0x90, 0x55, 0x31, 0x44, 0x99, 0x32, 0x65,
	0x80, 0x0f, 0x00, 0x89, 0x8d, 0x05, 0xc9, 0x12, 0x1f, 0x60, 0x87, 0x17, 0x1c, 0x70, 0x62, 0xab,
	0x76, 0x06, 0xf8, 0x01, 0x7e, 0x1b, 0xd5, 0x71, 0x68, 0xb6, 0x77, 0xce, 0x70, 0x7d, 0xaf, 0xa1,
	0xb0, 0xea, 0x93, 0xda, 0xd0, 0xb8, 0xa3, 0x0d, 0x16, 0xf3, 0x99, 0x9c, 0xaa, 0x7e, 0x19, 0xec,
	0x5f, 0x23, 0x3c, 0xeb, 0x69, 0xfc, 0xc2, 0x5b, 0xc8, 0xd4, 0xd4, 0x75, 0x74, 0xe4, 0xac, 0x64,
	0x75, 0x21, 0x12, 0x21, 0xc2, 0xd6, 0xf7, 0x3f, 0xc4, 0x2f, 0x4b, 0x56, 0x6f, 0x44, 0xbc, 0x4f,
	0x4e, 0x4b, 0xaf, 0xf9, 0xa6, 0x64, 0xf5, 0x4e, 0xc4, 0x1b, 0x0f, 0x90, 0x77, 0xbd, 0xa1, 0x51,
	0x0e, 0xc4, 0xb7, 0xd1, 0xff, 0x33, 0xde, 0xc1, 0x2e, 0xf4, 0x03, 0xf9, 0x20, 0x07, 0xc7, 0xaf,
	0x62, 0xd0, 0x59, 0x54, 0x8f, 0xb0, 0x7f, 0x73, 0xc6, 0xca, 0x77, 0x41, 0xce, 0x7c, 0x23, 0x87,
	0x6b, 0x3f, 0xb5, 0x2d, 0x79, 0x1f, 0x9b, 0xe4, 0x62, 0xc1, 0x53, 0x45, 0x43, 0xe3, 0x47, 0xd0,
	0xa9, 0x4c, 0xa2, 0xfb, 0x17, 0xc8, 0xe6, 0x25, 0xf8, 0x04, 0xc5, 0x1c, 0x95, 0xf8, 0xa6, 0x59,
	0xf6, 0x36, 0xab, 0xad, 0x87, 0x95, 0x5e, 0xbd, 0x5c, 0x5d, 0xd4, 0x4c, 0x65, 0xf1, 0x9f, 0x1e,
	0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x5f, 0x10, 0xad, 0x37, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ObjectClient is the client API for Object service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectClient interface {
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (Object_UploadObjectClient, error)
}

type objectClient struct {
	cc *grpc.ClientConn
}

func NewObjectClient(cc *grpc.ClientConn) ObjectClient {
	return &objectClient{cc}
}

func (c *objectClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (Object_UploadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Object_serviceDesc.Streams[0], "/objectpb.Object/UploadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectUploadObjectClient{stream}
	return x, nil
}

type Object_UploadObjectClient interface {
	Send(*ObjectChunk) error
	CloseAndRecv() (*UploadReply, error)
	grpc.ClientStream
}

type objectUploadObjectClient struct {
	grpc.ClientStream
}

func (x *objectUploadObjectClient) Send(m *ObjectChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectUploadObjectClient) CloseAndRecv() (*UploadReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObjectServer is the server API for Object service.
type ObjectServer interface {
	UploadObject(Object_UploadObjectServer) error
}

// UnimplementedObjectServer can be embedded to have forward compatible implementations.
type UnimplementedObjectServer struct {
}

func (*UnimplementedObjectServer) UploadObject(srv Object_UploadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}

func RegisterObjectServer(s *grpc.Server, srv ObjectServer) {
	s.RegisterService(&_Object_serviceDesc, srv)
}

func _Object_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectServer).UploadObject(&objectUploadObjectServer{stream})
}

type Object_UploadObjectServer interface {
	SendAndClose(*UploadReply) error
	Recv() (*ObjectChunk, error)
	grpc.ServerStream
}

type objectUploadObjectServer struct {
	grpc.ServerStream
}

func (x *objectUploadObjectServer) SendAndClose(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectUploadObjectServer) Recv() (*ObjectChunk, error) {
	m := new(ObjectChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Object_serviceDesc = grpc.ServiceDesc{
	ServiceName: "objectpb.Object",
	HandlerType: (*ObjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadObject",
			Handler:       _Object_UploadObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "object.proto",
}
