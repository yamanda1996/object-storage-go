// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.proto

package schedulerpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataServer struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataServer) Reset()         { *m = DataServer{} }
func (m *DataServer) String() string { return proto.CompactTextString(m) }
func (*DataServer) ProtoMessage()    {}
func (*DataServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{0}
}

func (m *DataServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataServer.Unmarshal(m, b)
}
func (m *DataServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataServer.Marshal(b, m, deterministic)
}
func (m *DataServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataServer.Merge(m, src)
}
func (m *DataServer) XXX_Size() int {
	return xxx_messageInfo_DataServer.Size(m)
}
func (m *DataServer) XXX_DiscardUnknown() {
	xxx_messageInfo_DataServer.DiscardUnknown(m)
}

var xxx_messageInfo_DataServer proto.InternalMessageInfo

func (m *DataServer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DataServer) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type CommonRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRequest) Reset()         { *m = CommonRequest{} }
func (m *CommonRequest) String() string { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()    {}
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3fc28395a6d9c5, []int{1}
}

func (m *CommonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRequest.Unmarshal(m, b)
}
func (m *CommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRequest.Marshal(b, m, deterministic)
}
func (m *CommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRequest.Merge(m, src)
}
func (m *CommonRequest) XXX_Size() int {
	return xxx_messageInfo_CommonRequest.Size(m)
}
func (m *CommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DataServer)(nil), "schedulerpb.DataServer")
	proto.RegisterType((*CommonRequest)(nil), "schedulerpb.CommonRequest")
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor_2b3fc28395a6d9c5) }

var fileDescriptor_2b3fc28395a6d9c5 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0xce, 0x48,
	0x4d, 0x29, 0xcd, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0x0b, 0x14,
	0x24, 0x29, 0x59, 0x71, 0x71, 0xb9, 0x24, 0x96, 0x24, 0x06, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x09,
	0x49, 0x70, 0xb1, 0x27, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0xc1, 0xb8, 0x42, 0x42, 0x5c, 0x2c, 0x05, 0xf9, 0x45, 0x25, 0x12, 0x4c, 0x60, 0x61, 0x30,
	0x5b, 0x89, 0x9f, 0x8b, 0xd7, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x2f, 0x28, 0xb5, 0xb0, 0x34, 0xb5,
	0xb8, 0xc4, 0x28, 0x98, 0x8b, 0x33, 0x18, 0x66, 0xb6, 0x90, 0x1b, 0x17, 0xaf, 0x7b, 0x6a, 0x09,
	0x92, 0xe1, 0x52, 0x7a, 0x48, 0x16, 0xeb, 0xa1, 0xe8, 0x94, 0x12, 0x47, 0x91, 0x43, 0x68, 0x52,
	0x62, 0x48, 0x62, 0x03, 0xbb, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xe2, 0xa6, 0x53,
	0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	GetDataServer(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*DataServer, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetDataServer(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*DataServer, error) {
	out := new(DataServer)
	err := c.cc.Invoke(ctx, "/schedulerpb.Scheduler/GetDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	GetDataServer(context.Context, *CommonRequest) (*DataServer, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) GetDataServer(ctx context.Context, req *CommonRequest) (*DataServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServer not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedulerpb.Scheduler/GetDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetDataServer(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schedulerpb.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataServer",
			Handler:    _Scheduler_GetDataServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}
